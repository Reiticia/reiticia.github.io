import{_ as n,o as s,c as a,a as t}from"./app-d6f5df65.js";const p={},e=t(`<h1 id="setconverter和converterproperty-set" tabindex="-1"><a class="header-anchor" href="#setconverter和converterproperty-set" aria-hidden="true">#</a> setConverter和converterProperty().set</h1><ul><li><p>setConverter使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>comboBox<span class="token punctuation">.</span><span class="token function">setConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token comment">// 输出时处理每一项的方法</span>
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">String</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">return</span> object<span class="token operator">+</span><span class="token string">&quot; - AO&quot;</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token comment">// 输入时处理每一项的方法</span>
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">fromString</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">GREEN</span> <span class="token operator">+</span> <span class="token string">&quot;setConverter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> string <span class="token operator">+</span> <span class="token string">&quot; - AI&quot;</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>converterProperty().set</p><p><strong>定义了此项会替代setConverter()方法的数据处理</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>comboBox<span class="token punctuation">.</span><span class="token function">converterProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">String</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">return</span> object <span class="token operator">+</span> <span class="token string">&quot; - BO&quot;</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">fromString</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">BLUE</span> <span class="token operator">+</span> <span class="token string">&quot;converterProperty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> string<span class="token operator">+</span><span class="token string">&quot; - BI&quot;</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>setCellFactory</p><p><strong>定义了此项会在初始渲染数据使用代替setConverter()和converterProperty().set()；但处理ComboBox自带输入框的输入数据和点击某一项进行展示时不会被调用</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>comboBox<span class="token punctuation">.</span><span class="token function">setCellFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListView</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">ListCell</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token class-name">ListCell</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">ListView</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">ListCell</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listCell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListCell</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token annotation punctuation">@Override</span>  
            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">updateItem</span><span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token keyword">boolean</span> empty<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                <span class="token comment">// 如果删除了此行，则会导致下拉列表无法选择  </span>
                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">updateItem</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> empty<span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>empty<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">GREEN</span> <span class="token operator">+</span> <span class="token string">&quot;setCellFactory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">&quot; - C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token punctuation">}</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> listCell<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>cellFactoryProperty().set</p><p><strong>定义了此项会替代setCellFactory()方法的数据处理</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>comboBox<span class="token punctuation">.</span><span class="token function">cellFactoryProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListView</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">ListCell</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token class-name">ListCell</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">ListView</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">ListCell</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listCell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListCell</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token annotation punctuation">@Override</span>  
            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">updateItem</span><span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token keyword">boolean</span> empty<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                <span class="token comment">// 如果删除了此行，则会导致下拉列表无法选择  </span>
                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">updateItem</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> empty<span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>empty<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">BLUE</span> <span class="token operator">+</span> <span class="token string">&quot;cellFactoryProperty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">&quot; - D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token punctuation">}</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> listCell<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,2),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","lesson041.html.vue"]]);export{k as default};
