import{_ as n,o as s,c as a,a as t}from"./app-d6f5df65.js";const p={},e=t(`<h1 id="可观察list、set、map" tabindex="-1"><a class="header-anchor" href="#可观察list、set、map" aria-hidden="true">#</a> 可观察List、Set、Map</h1><h2 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List</h2><ul><li><p>创建List监视属性</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ObservableList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">FXCollections</span><span class="token punctuation">.</span><span class="token function">observableArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;item&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
<span class="token class-name">SimpleListProperty</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listProperty <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleListProperty</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>值监听</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>listProperty<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span>observable<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>  
    <span class="token comment">// oldValue与newValue相同  </span>
    oldValue<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">YELLOW</span> <span class="token operator">+</span> <span class="token string">&quot;--------------&quot;</span> <span class="token operator">+</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">RESET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    newValue<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方法监听</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>listProperty<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ListChangeListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> c <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>  
    <span class="token comment">// 具体操作  </span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">// { [item5] added at 5 }  </span>
    <span class="token comment">// 获得元素列表  </span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;c.getList() = &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">// next方法必须于判断操作类型前调用，指向下一步操作  </span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;c.next() = &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">// c.reset();// 撤销c.next()操作 (下面测试中不包含此行代码) </span>
    <span class="token comment">// 判断操作类型  </span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;c.getFrom() = &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">getFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;c.getTo() = &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">getTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;c.wasAdded() = &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">wasAdded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;c.wasRemoved() = &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">wasRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;c.wasReplaced() = &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">wasReplaced</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">/* 
    当可观察列表list中的泛型为普通数据类型时基本为false；
    当可观察列表list中的泛型为监视属性时且创建list时指定了callback回调函数,
    则如果列表中监视属性的值发生改变，则返回true
    */</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;c.wasUpdated() = &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">wasUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;c.getAddedSubList() = &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">getAddedSubList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取增加或删除的元素列表  </span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;c.wasPermutated() = &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">wasPermutated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 是否被排序  </span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;c.getPermutation(0) = &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">getPermutation</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取原来索引为0的元素经过排序后的位置（索引）  </span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">RED</span> <span class="token operator">+</span> <span class="token string">&quot;没有进行排序操作&quot;</span> <span class="token operator">+</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">RESET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">YELLOW</span> <span class="token operator">+</span> <span class="token string">&quot;----------------------------------&quot;</span> <span class="token operator">+</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">RESET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>添加元素<code>list.add(&quot;item5&quot;);</code></p><blockquote><p>{ [item5] added at 5 } c.getList() = ListProperty [value: [item0, item1, item2, item3, item4, item5]] c.next() = true c.getFrom() = 5 c.getTo() = 6 c.wasAdded() = true c.wasRemoved() = false c.wasReplaced() = false c.wasUpdated() = false c.getAddedSubList() = [item5] c.wasPermutated() = false 没有进行排序操作</p></blockquote></li><li><p>追加测试<code>list.remove(&quot;item5&quot;);</code></p><blockquote><p>（省略上一条语句测试） { [item5] removed at 5 } c.getList() = ListProperty [value: [item0, item1, item2, item3, item4]] c.next() = true c.getFrom() = 5 c.getTo() = 5 c.wasAdded() = false c.wasRemoved() = true c.wasReplaced() = false c.wasUpdated() = false c.getAddedSubList() = [] c.wasPermutated() = false 没有进行排序操作</p></blockquote></li><li><p>追加测试<code>list.replaceAll(s -&gt; s.replaceFirst(&quot;item1&quot;, &quot;listItem1&quot;));</code></p><blockquote><p>（省略上一条语句测试） { [item0] replaced by [item0] at 0 } c.getList() = ListProperty [value: [item0, item1, item2, item3, item4]] c.next() = true c.getFrom() = 0 c.getTo() = 1 c.wasAdded() = true c.wasRemoved() = true c.wasReplaced() = true c.wasUpdated() = false c.getAddedSubList() = [item0] c.wasPermutated() = false</p><p>没有进行排序操作</p><p>{ [item1] replaced by [listItem1] at 1 } c.getList() = ListProperty [value: [item0, listItem1, item2, item3, item4]] c.next() = true c.getFrom() = 1 c.getTo() = 2 c.wasAdded() = true c.wasRemoved() = true c.wasReplaced() = true c.wasUpdated() = false c.getAddedSubList() = [listItem1] c.wasPermutated() = false</p><p>没有进行排序操作</p><p>{ [item2] replaced by [item2] at 2 } c.getList() = ListProperty [value: [item0, listItem1, item2, item3, item4]] c.next() = true c.getFrom() = 2 c.getTo() = 3 c.wasAdded() = true c.wasRemoved() = true c.wasReplaced() = true c.wasUpdated() = false c.getAddedSubList() = [item2] c.wasPermutated() = false</p><p>没有进行排序操作</p><p>{ [item3] replaced by [item3] at 3 } c.getList() = ListProperty [value: [item0, listItem1, item2, item3, item4]] c.next() = true c.getFrom() = 3 c.getTo() = 4 c.wasAdded() = true c.wasRemoved() = true c.wasReplaced() = true c.wasUpdated() = false c.getAddedSubList() = [item3] c.wasPermutated() = false</p><p>没有进行排序操作</p><p>{ [item4] replaced by [item4] at 4 } c.getList() = ListProperty [value: [item0, listItem1, item2, item3, item4]] c.next() = true c.getFrom() = 4 c.getTo() = 5 c.wasAdded() = true c.wasRemoved() = true c.wasReplaced() = true c.wasUpdated() = false c.getAddedSubList() = [item4] c.wasPermutated() = false</p><p>没有进行排序操作</p></blockquote></li><li><p>追加测试<code>list.set(3, &quot;ListItem3&quot;);</code></p><blockquote><p>{ [item3] replaced by [ListItem3] at 3 } c.getList() = ListProperty [value: [item0, listItem1, item2, ListItem3, item4]] c.next() = true c.getFrom() = 3 c.getTo() = 4 c.wasAdded() = true c.wasRemoved() = true c.wasReplaced() = true c.wasUpdated() = false c.getAddedSubList() = [ListItem3] c.wasPermutated() = false 没有进行排序操作</p></blockquote></li><li><p>追加测试<code>list.sort(String::compareTo);</code></p><blockquote><p>{ permutated by [1, 4, 2, 0, 3] } c.getList() = ListProperty [value: [ListItem3, item0, item2, item4, listItem1]] c.next() = true c.getFrom() = 0 c.getTo() = 5 c.wasAdded() = falsec.wasRemoved() = false c.wasReplaced() = false c.wasUpdated() = false c.getAddedSubList() = [] c.wasPermutated() = true c.getPermutation(0) = 1</p></blockquote></li></ul><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h2><ul><li><p>创建Set监视属性</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ObservableSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token class-name">FXCollections</span><span class="token punctuation">.</span><span class="token function">observableSet</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;G&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;H&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;I&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;J&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;K&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;L&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;M&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;N&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;O&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;P&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Q&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;R&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;S&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;T&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;U&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;V&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;W&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;X&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Y&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">SimpleSetProperty</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> setProperty <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleSetProperty</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方法监听</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>setProperty<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">SetChangeListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> change <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>  
  <span class="token comment">// 与list相同，但没有next方法  </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>遍历</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// iterator迭代器遍历</span>
<span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> setProperty<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
<span class="token comment">// forEach遍历</span>
setProperty<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h2><ul><li><p>创建Map监视属性</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ObservableMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token class-name">FXCollections</span><span class="token punctuation">.</span><span class="token function">observableHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token char">&#39;A&#39;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">ROOT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
<span class="token class-name">SimpleMapProperty</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mapProperty <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMapProperty</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>遍历</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mapProperty<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> s2 <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul>`,7),o=[e];function c(l,u){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","lesson053.html.vue"]]);export{k as default};
