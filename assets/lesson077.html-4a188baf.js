import{_ as n,o as s,c as a,a as t}from"./app-d6f5df65.js";const e={},p=t(`<h1 id="鼠标事件-传递和冒泡" tabindex="-1"><a class="header-anchor" href="#鼠标事件-传递和冒泡" aria-hidden="true">#</a> 鼠标事件（传递和冒泡）</h1><p><strong>自定义的事件响应方法比内置的事件响应方法优先执行</strong></p><ol><li><p>自定义鼠标事件处理器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyEventHandler</span> <span class="token keyword">implements</span> <span class="token class-name">EventHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MouseEvent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConsoleColor</span> consoleColor<span class="token punctuation">;</span>  

    <span class="token keyword">public</span> <span class="token class-name">MyEventHandler</span><span class="token punctuation">(</span><span class="token class-name">ConsoleColor</span> consoleColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>consoleColor <span class="token operator">=</span> consoleColor<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>consoleColor<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;event.getEventType() = &quot;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;event.getSource() = &quot;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;event.getTarget() = &quot;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">ConsoleColor</span><span class="token punctuation">.</span><span class="token constant">RESET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>为每一个组件创建事件处理器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MyEventHandler</span> hBoxHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyEventHandler</span><span class="token punctuation">(</span><span class="token class-name">ConsoleColor</span><span class="token punctuation">.</span><span class="token constant">YELLOW</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">MyEventHandler</span> anchorPaneHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyEventHandler</span><span class="token punctuation">(</span><span class="token class-name">ConsoleColor</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">MyEventHandler</span> sceneHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyEventHandler</span><span class="token punctuation">(</span><span class="token class-name">ConsoleColor</span><span class="token punctuation">.</span><span class="token constant">GREEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">MyEventHandler</span> stageHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyEventHandler</span><span class="token punctuation">(</span><span class="token class-name">ConsoleColor</span><span class="token punctuation">.</span><span class="token constant">CYAN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="事件传递" tabindex="-1"><a class="header-anchor" href="#事件传递" aria-hidden="true">#</a> 事件传递</h2><p><strong>调用顺序：父组件-&gt;子组件</strong></p><ul><li><p>事件处理（传递）<code>hBox.addEventFilter(MouseEvent.MOUSE_CLICKED, hBoxHandler);</code></p></li><li><p>阻止事件传递<code>event.consume();</code></p></li></ul><h2 id="事件冒泡" tabindex="-1"><a class="header-anchor" href="#事件冒泡" aria-hidden="true">#</a> 事件冒泡</h2><p><strong>调用顺序：子组件-&gt;父组件</strong></p><ul><li><p>事件处理（冒泡）<code>hBox.addEventHandler(MouseEvent.MOUSE_CLICKED, hBoxHandler);</code></p></li><li><p>阻止事件冒泡<code>event.consume();</code></p></li></ul><p><strong>button本身无法进行事件冒泡，要实现事件冒泡需要手动调用事件</strong><code>Event.fireEvent(hBox, event);</code></p>`,10),o=[p];function c(l,u){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","lesson077.html.vue"]]);export{k as default};
