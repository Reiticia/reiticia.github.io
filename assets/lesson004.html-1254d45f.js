import{_ as n,o as s,c as a,a as t}from"./app-d6f5df65.js";const p={},e=t(`<h1 id="stage窗口-续" tabindex="-1"><a class="header-anchor" href="#stage窗口-续" aria-hidden="true">#</a> Stage窗口（续）</h1><ul><li><p>设置窗口透明度<code>primaryStage.setOpacity(0.5);</code></p></li><li><p>设置置顶窗口 <code>primaryStage.setAlwaysOnTop(true);</code></p></li><li><p>设置窗口位置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 距离屏幕左上角距离</span>
primaryStage<span class="token punctuation">.</span><span class="token function">setX</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
primaryStage<span class="token punctuation">.</span><span class="token function">setY</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>监听窗口移动</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>primaryStage<span class="token punctuation">.</span><span class="token function">xProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChangeListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token class-name">ObservableValue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> observable<span class="token punctuation">,</span> <span class="token class-name">Number</span> oldValue<span class="token punctuation">,</span> <span class="token class-name">Number</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;x:&quot;</span> <span class="token operator">+</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
primaryStage<span class="token punctuation">.</span><span class="token function">yProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChangeListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token class-name">ObservableValue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> observable<span class="token punctuation">,</span> <span class="token class-name">Number</span> oldValue<span class="token punctuation">,</span> <span class="token class-name">Number</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;y:&quot;</span> <span class="token operator">+</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>窗口样式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 默认样式  </span>
stage<span class="token punctuation">.</span><span class="token function">initStyle</span><span class="token punctuation">(</span><span class="token class-name">StageStyle</span><span class="token punctuation">.</span><span class="token constant">DECORATED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 透明样式  </span>
stage1<span class="token punctuation">.</span><span class="token function">initStyle</span><span class="token punctuation">(</span><span class="token class-name">StageStyle</span><span class="token punctuation">.</span><span class="token constant">TRANSPARENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 纯白色背景，没有装饰  </span>
stage2<span class="token punctuation">.</span><span class="token function">initStyle</span><span class="token punctuation">(</span><span class="token class-name">StageStyle</span><span class="token punctuation">.</span><span class="token constant">UNDECORATED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 定义具有纯白色背景和用于实用程序窗口的最小平台装饰的Stage样式。</span>
stage3<span class="token punctuation">.</span><span class="token function">initStyle</span><span class="token punctuation">(</span><span class="token class-name">StageStyle</span><span class="token punctuation">.</span><span class="token constant">UTILITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 用平台装饰定义Stage风格，消除客户区和装饰之间的边界。客户区背景与装饰统一。</span>
stage4<span class="token punctuation">.</span><span class="token function">initStyle</span><span class="token punctuation">(</span><span class="token class-name">StageStyle</span><span class="token punctuation">.</span><span class="token constant">UNIFIED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>窗口模态</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 设置模态窗口，设置后如果该窗口不关闭则不能点击其他窗口</span>
stage2<span class="token punctuation">.</span><span class="token function">initModality</span><span class="token punctuation">(</span><span class="token class-name">Modality</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_MODAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置父窗口</span>
stage1<span class="token punctuation">.</span><span class="token function">initOwner</span><span class="token punctuation">(</span>stage<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment">// 设置模态窗口，该窗口没有关闭前点击stage（即父窗口）窗口无效</span>
stage1<span class="token punctuation">.</span><span class="token function">initModality</span><span class="token punctuation">(</span><span class="token class-name">Modality</span><span class="token punctuation">.</span><span class="token constant">WINDOW_MODAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,2),c=[e];function o(l,i){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","lesson004.html.vue"]]);export{k as default};
