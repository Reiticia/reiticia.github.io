import{_ as n,o as s,c as a,a as e}from"./app-d6f5df65.js";const p={},t=e(`<h1 id="监听" tabindex="-1"><a class="header-anchor" href="#监听" aria-hidden="true">#</a> 监听</h1><h2 id="数据更改监听" tabindex="-1"><a class="header-anchor" href="#数据更改监听" aria-hidden="true">#</a> 数据更改监听</h2><ul><li><p>匿名类写法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>sip<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChangeListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token class-name">ObservableValue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> observable<span class="token punctuation">,</span> <span class="token class-name">Number</span> oldValue<span class="token punctuation">,</span> <span class="token class-name">Number</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数据更改监听&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用自定义类监听</p><ol><li><p>自定义类实现ChangeListener</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Change</span> <span class="token keyword">implements</span> <span class="token class-name">ChangeListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  

    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token class-name">ObservableValue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> observable<span class="token punctuation">,</span> <span class="token class-name">Number</span> oldValue<span class="token punctuation">,</span> <span class="token class-name">Number</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数据更改监听&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用自定义监听器类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Change</span> change <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加监听器</span>
sip<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>change<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 若干操作</span>
<span class="token comment">// 移除监听器</span>
sip<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span>change<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>使用弱引用则无需手动移除监听器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Change</span> change <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">WeakChangeListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakChangeListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>change<span class="token punctuation">)</span><span class="token punctuation">;</span>  
sip<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="失效监听" tabindex="-1"><a class="header-anchor" href="#失效监听" aria-hidden="true">#</a> 失效监听</h2><p>特点是：<strong>如果不绑定数据更改监听事件，则当数据进行多次更改而未被读取时，只会调用一次延时监听事件，可以提升效率</strong></p><ul><li><p>匿名类写法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>sip<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InvalidationListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invalidated</span><span class="token punctuation">(</span><span class="token class-name">Observable</span> observable<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;延时监听&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用自定义类监听</p><ol><li><p>自定义类实现InvalidationListener</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Inva</span> <span class="token keyword">implements</span> <span class="token class-name">InvalidationListener</span> <span class="token punctuation">{</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invalidated</span><span class="token punctuation">(</span><span class="token class-name">Observable</span> observable<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;失效监听&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用自定义监听器类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Inva</span> inva <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inva</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加监听器</span>
sip<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>inva<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 若干操作</span>
<span class="token comment">// 移除监听器</span>
sip<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span>inva<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ul>`,6),c=[t];function o(l,i){return s(),a("div",null,c)}const d=n(p,[["render",o],["__file","lesson054.html.vue"]]);export{d as default};
